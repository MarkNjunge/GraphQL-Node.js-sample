# A user.
type User {
	# The user's id.
	id: String

	# The user's full name.
	fullname: String

	# The user's email.
	email: String

	# The user's profile picture.
	photoUrl: String

	# Posts made by the user.
	posts: [Post]
}

# Return type of a successful login or registration.
# Used to authorize the current user.
type AuthenticationReturn {
	# UserId for the user the token is for.
	userId: String

	# Token to be used for requests that require authorization. Passed in the header as Authorization: 'token'
	token: String

	# The time (epoch time in seconds) at which the token was created.
	created: Int

	# The time (epoch time in seconds) at which the token expires.
	expires: Int
}

type Query {
	# Get one user by their id.
	user(id: String): User

	# Get all users. Optional fullname parameter is used to find users whose name contains the input.
	users(fullname: String): [User]

	# Details on the current user.
	currentUser: User
}

type Mutation {
	# Register a new user. Email is unique.
	register(
		fullname: String!
		email: String!
		password: String!
	): AuthenticationReturn

	# Login a user.
	login(email: String!, password: String!): AuthenticationReturn

	# Update the current user's profile.
	updateUser(fullname: String, email: String, photoUrl: String): String

	# Change the current user's password.
	changePassword(currentPassword: String, newPassword: String): String
}
